// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=onAudioText_4b179486f6
ROOST_METHOD_SIG_HASH=onAudioText_1eb7f8b916


*/

// ********RoostGPT********
// __tests__/polling.test.js

import request from 'request';
import bot from '../examples/polling';

describe('bot.onText for audio command', () => {
  test('should send audio file when /audio command is received', () => {
    const mockMsg = { chat: { id: 123 } };
    const expectedUrl = 'https://upload.wikimedia.org/wikipedia/commons/c/c8/Example.ogg';
    
    const sendAudioMock = jest.fn();
    bot.sendAudio = sendAudioMock;

    bot.onText(/\/audio/, function onAudioText(msg) {
      const url = 'https://upload.wikimedia.org/wikipedia/commons/c/c8/Example.ogg';
      const audio = request(url);
      bot.sendAudio(msg.chat.id, audio);
    });

    bot.onText('/audio', mockMsg);

    expect(sendAudioMock).toHaveBeenCalledWith(mockMsg.chat.id, expect.any(Object));
    expect(sendAudioMock).toHaveBeenCalledTimes(1);
  });
  
  test('should not send audio file if url request fails', () => {
    const mockMsg = { chat: { id: 123 } };
    const invalidUrl = 'invalid-url';
    
    const sendAudioMock = jest.fn();
    bot.sendAudio = sendAudioMock;

    bot.onText(/\/audio/, function onAudioText(msg) {
      const audio = request(invalidUrl);
      bot.sendAudio(msg.chat.id, audio);
    });

    bot.onText('/audio', mockMsg);

    expect(sendAudioMock).not.toHaveBeenCalled();
  });
});
