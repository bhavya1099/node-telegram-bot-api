// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=647e40da7b
ROOST_METHOD_SIG_HASH=8596a2402c


*/

// ********RoostGPT********
const errors = require('./errors');
const debug = require('debug')('node-telegram-bot-api');
const https = require('https');
const http = require('http');
const fs = require('fs');
const bl = require('bl');

const TelegramWebHook = require('../src/telegramWebHook');

describe('TelegramWebHook _requestListener method', () => {
  let telegramWebHook;

  beforeEach(() => {
    telegramWebHook = new TelegramWebHook();
  });

  test('should handle valid POST request with bot token in URL', () => {
    const req = { url: 'https://example.com?token=123', method: 'POST', headers: { 'content-type': 'application/json' } };
    const res = { statusCode: 200, end: jest.fn() };
    telegramWebHook._requestListener(req, res);
    expect(res.statusCode).toBe(200);
    expect(res.end).toHaveBeenCalledWith('OK');
  });

  test('should handle health check request', () => {
    const req = { url: 'https://example.com/health', method: 'GET' };
    const res = { statusCode: 200, end: jest.fn() };
    telegramWebHook._requestListener(req, res);
    expect(res.statusCode).toBe(200);
    expect(res.end).toHaveBeenCalledWith('OK');
  });

  test('should handle unauthorized request', () => {
    const req = { url: 'https://example.com/unauthorized', method: 'GET' };
    const res = { statusCode: 401, end: jest.fn() };
    telegramWebHook._requestListener(req, res);
    expect(res.statusCode).toBe(401);
    expect(res.end).toHaveBeenCalled();
  });

  test('should handle non-POST request with bot token in URL', () => {
    const req = { url: 'https://example.com?token=123', method: 'GET' };
    const res = { statusCode: 418, end: jest.fn() };
    telegramWebHook._requestListener(req, res);
    expect(res.statusCode).toBe(418);
    expect(res.end).toHaveBeenCalled();
  });
});
